{"input":{"ourVersion":"1.33.1","commit":"51b0b28134d51361cf996d2f0a1c698247aeabd8","locale":"en","devMode":false,"absoluteFolderPath":"/root/.vscode/extensions","isBuiltin":false,"isUnderDevelopment":false,"tanslations":{},"mtime":1557202037178},"result":[{"name":"cmake-tools-helper","displayName":"CMake Tools Helper","description":"Enables cpptools to automatically know the information parsed by CMake Tools (e.g. include directories and defines)","version":"0.2.1","publisher":"maddouri","license":"BSD-3-Clause","icon":"res/icon.png","bugs":{"url":"https://github.com/maddouri/vscode-cmake-tools-helper/issues"},"homepage":"https://github.com/maddouri/vscode-cmake-tools-helper/blob/master/README.md","repository":{"type":"git","url":"https://github.com/maddouri/vscode-cmake-tools-helper.git"},"engines":{"vscode":"^1.22.0"},"categories":["Other"],"keywords":["cmake","tools","helper","build","c++"],"activationEvents":["onCommand:cmake.update_cpptools","onCommand:cmake.show_active_cmake_config_name","onCommand:cmake.install_cmake","onCommand:cmake.change_cmake_version","workspaceContains:CMakeLists.txt","onCommand:cmake.buildWithTarget","onCommand:cmake.cleanConfigure","onCommand:cmake.configure","onCommand:cmake.setBuildType","onCommand:cmake.setDefaultTarget"],"main":"/root/.vscode/extensions/maddouri.cmake-tools-helper-0.2.1/out/src/extension","contributes":{"commands":[{"command":"cmake.show_active_cmake_config_name","title":"Show active CMake config name","category":"CMake"},{"command":"cmake.update_cpptools","title":"Update cpptools","category":"CMake"},{"command":"cmake.install_cmake","title":"Install CMake","category":"CMake"},{"command":"cmake.change_cmake_version","title":"Change CMake version","category":"CMake"}],"configuration":{"type":"object","title":"CMake Helper Configuration","properties":{"cmake-tools-helper.cmake_download_path":{"type":"string","default":null,"description":"The path to a folder in which the CMake archives are downloaded and extracted"},"cmake-tools-helper.auto_set_cpptools_target":{"type":"boolean","default":true,"description":"If 'true', this extension will automatically set the target of cpptools to be the same as the current CMake target."}}}},"scripts":{"vscode:prepublish":"npm run compile","compile":"tsc -p ./","watch":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install","test":"npm run compile && node ./node_modules/vscode/bin/test"},"extensionDependencies":["ms-vscode.cpptools","twxs.cmake","vector-of-bool.cmake-tools"],"dependencies":{"mkdirp":"^0.5.1","@octokit/rest":"^15.2.5","request-progress":"^3.0.0","request":"^2.85.0","decompress":"^4.2.0","url-exists":"^1.0.3","compare-versions":"^3.1.0"},"devDependencies":{"typescript":"^2.7.2","vscode":"^1.1.14","mkdirp":"^0.5.1","mocha":"^5.0.5","@types/node":"^9.6.0","@types/mocha":"^5.0.0","@octokit/rest":"^15.2.5","request-progress":"^3.0.0","request":"^2.85.0","decompress":"^4.2.0","url-exists":"^1.0.3","compare-versions":"^3.1.0"},"uuid":"c5a7f95f-b57c-43ad-8710-034b9a3c6ff9","isBuiltin":false,"isUnderDevelopment":false,"id":"maddouri.cmake-tools-helper","identifier":{"value":"maddouri.cmake-tools-helper","_lower":"maddouri.cmake-tools-helper"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/maddouri.cmake-tools-helper-0.2.1","path":"/root/.vscode/extensions/maddouri.cmake-tools-helper-0.2.1","scheme":"file"}},{"name":"cpptools","displayName":"C/C++","description":"C/C++ IntelliSense, debugging, and code browsing.","version":"0.23.0","publisher":"ms-vscode","preview":true,"icon":"LanguageCCPP_color_128x.png","readme":"README.md","author":{"name":"Microsoft Corporation"},"license":"SEE LICENSE IN LICENSE.txt","engines":{"vscode":"^1.30.0"},"bugs":{"url":"https://github.com/Microsoft/vscode-cpptools/issues","email":"c_cpp_support@microsoft.com"},"repository":{"type":"git","url":"https://github.com/Microsoft/vscode-cpptools.git"},"homepage":"https://github.com/Microsoft/vscode-cpptools","qna":"https://github.com/Microsoft/vscode-cpptools/issues","keywords":["C","C++","IntelliSense","Microsoft","multi-root ready"],"categories":["Programming Languages","Debuggers","Formatters","Linters","Snippets"],"activationEvents":["onLanguage:cpp","onLanguage:c","onCommand:extension.pickNativeProcess","onCommand:extension.pickRemoteNativeProcess","onCommand:C_Cpp.BuildAndDebugActiveFile","onCommand:C_Cpp.ConfigurationEditJSON","onCommand:C_Cpp.ConfigurationEditUI","onCommand:C_Cpp.ConfigurationSelect","onCommand:C_Cpp.ConfigurationProviderSelect","onCommand:C_Cpp.SwitchHeaderSource","onCommand:C_Cpp.Navigate","onCommand:C_Cpp.GoToDeclaration","onCommand:C_Cpp.PeekDeclaration","onCommand:C_Cpp.EnableErrorSquiggles","onCommand:C_Cpp.DisableErrorSquiggles","onCommand:C_Cpp.ToggleIncludeFallback","onCommand:C_Cpp.ToggleDimInactiveRegions","onCommand:C_Cpp.ShowReleaseNotes","onCommand:C_Cpp.ResetDatabase","onCommand:C_Cpp.PauseParsing","onCommand:C_Cpp.ResumeParsing","onCommand:C_Cpp.ShowParsingCommands","onCommand:C_Cpp.TakeSurvey","onCommand:C_Cpp.LogDiagnostics","onDebug","workspaceContains:/.vscode/c_cpp_properties.json"],"main":"/root/.vscode/extensions/ms-vscode.cpptools-0.23.0/dist/main","contributes":{"problemMatchers":[{"name":"gcc","owner":"cpptools","fileLocation":["relative","${workspaceFolder}"],"pattern":{"regexp":"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$","file":1,"line":2,"column":3,"severity":4,"message":5}}],"configuration":{"type":"object","title":"C/C++","properties":{"C_Cpp.clang_format_path":{"type":["string","null"],"default":null,"description":"The full path of the clang-format executable.","scope":"resource"},"C_Cpp.clang_format_style":{"type":"string","default":"file","description":"Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use \"file\" to load the style from a .clang-format file in the current or parent directory. Use {key: value, ...} to set specific parameters. For example, the \"Visual Studio\" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }","scope":"resource"},"C_Cpp.clang_format_fallbackStyle":{"type":"string","default":"Visual Studio","description":"Name of the predefined style used as a fallback in case clang-format is invoked with style \"file\" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use {key: value, ...} to set specific parameters. For example, the \"Visual Studio\" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }","scope":"resource"},"C_Cpp.clang_format_sortIncludes":{"type":["boolean","null"],"enum":[true,false,null],"default":null,"description":"If set, overrides the include sorting behavior determined by the SortIncludes parameter.","scope":"resource"},"C_Cpp.intelliSenseEngine":{"type":"string","enum":["Default","Tag Parser","Disabled"],"default":"Default","description":"Controls the IntelliSense provider. \"Tag Parser\" provides \"fuzzy\" results that are not context-aware. \"Default\" provides context-aware results. \"Disabled\" turns off C/C++ language service features.","scope":"resource"},"C_Cpp.intelliSenseEngineFallback":{"type":"string","enum":["Enabled","Disabled"],"default":"Disabled","description":"Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.","scope":"resource"},"C_Cpp.autocomplete":{"type":"string","enum":["Default","Disabled"],"default":"Default","description":"Controls the auto-completion provider. \"Default\" uses the active IntelliSense engine. \"Disabled\" uses the word-based completion provided by Visual Studio Code.","scope":"resource"},"C_Cpp.errorSquiggles":{"type":"string","enum":["Enabled","Disabled","EnabledIfIncludesResolve"],"default":"EnabledIfIncludesResolve","description":"Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. This setting is ignored by the Tag Parser engine.","scope":"resource"},"C_Cpp.dimInactiveRegions":{"type":"boolean","default":true,"description":"Controls whether inactive preprocessor blocks are colored differently than active code. This setting is ignored by the Tag Parser engine.","scope":"resource"},"C_Cpp.inactiveRegionOpacity":{"type:":"number","default":0.55,"Description":"Controls the opacity of inactive preprocessor blocks. Scales between 0.1 and 1.0. This setting only applies when inactive region dimming is enabled.","scope":"resource","minimum":0.1,"maximum":1},"C_Cpp.inactiveRegionForegroundColor":{"type":["string","null"],"default":null,"description":"Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.","scope":"resource"},"C_Cpp.inactiveRegionBackgroundColor":{"type":["string","null"],"default":null,"description":"Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.","scope":"resource"},"C_Cpp.formatting":{"type":"string","enum":["Default","Disabled"],"default":"Default","description":"\"Default\" enables code formatting. \"Disabled\" disables code formatting.","scope":"resource"},"C_Cpp.navigation.length":{"type":"number","default":60,"description":"Maximum character length of the scope/navigation UI in the status bar. The UI may not appear if this value is too large.","scope":"resource"},"C_Cpp.loggingLevel":{"type":"string","enum":["None","Error","Warning","Information","Debug"],"default":"Error","description":"The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information < Debug.","scope":"resource"},"C_Cpp.autoAddFileAssociations":{"type":"boolean","default":true,"description":"Controls whether files are automatically added to files.associations when they are the target of a navigation operation from a C/C++ file.","scope":"resource"},"C_Cpp.workspaceParsingPriority":{"type":"string","enum":["highest","high","medium","low"],"default":"highest","description":"Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.","scope":"resource"},"C_Cpp.workspaceSymbols":{"type":"string","enum":["All","Just My Code"],"default":"Just My Code","description":"The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked","scope":"resource"},"C_Cpp.exclusionPolicy":{"type":"string","enum":["checkFolders","checkFilesAndFolders"],"default":"checkFolders","description":"Instructs the extension when to use the \"files.exclude\" setting when determining which files should be added to the code navigation database while traversing through the paths in the \"browse.path\" array. \"checkFolders\" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). \"checkFilesAndFolders\" means that the exclusion filters will be evaluated against every file and folder encountered. If your \"files.exclude\" setting only contains folders, then \"checkFolders\" is the best choice and will increase the speed at which the extension can initialize the code navigation database.","scope":"resource"},"C_Cpp.preferredPathSeparator":{"type":"string","enum":["Forward Slash","Backslash"],"default":"Forward Slash","description":"The character used as a path separator for #include auto-completion results.","scope":"resource"},"C_Cpp.commentContinuationPatterns":{"type":"array","default":["/**"],"items":{"anyOf":[{"type":"string","description":"The pattern that begins a multiline or single line comment block. The continuation pattern defaults to ' * ' for multiline comment blocks or this string for single line comment blocks."},{"type":"object","properties":{"begin":{"type":"string","description":"The pattern that begins a multiline or single line comment block."},"continue":{"type":"string","description":"The text that will be inserted on the next line when Enter is pressed inside a multiline or single line comment block."}}}]},"description":"Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.","scope":"resource"},"C_Cpp.configurationWarnings":{"type":"string","enum":["Enabled","Disabled"],"default":"Enabled","description":"Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.","scope":"resource"},"C_Cpp.intelliSenseCachePath":{"type":"string","default":"${workspaceFolder}/.vscode","description":"Defines the folder path for cached precompiled headers used by IntelliSense. The default path \"${workspaceFolder}/.vscode\" will be used if a specified path is invalid.","scope":"resource"},"C_Cpp.intelliSenseCacheSize":{"type":"number","default":5120,"description":"Maximum size of the per-workspace hard drive space in megabytes for cached precompiled headers; the actual usage may fluctuate around this value. The default size is 5120 MB. Precompiled header caching is disabled when the size is 0.","scope":"resource","minimum":0},"C_Cpp.default.includePath":{"type":["array","null"],"items":{"type":"string"},"default":null,"description":"The value to use in a configuration if \"includePath\" is not specified, or the values to insert if \"${default}\" is present in \"includePath\".","scope":"resource"},"C_Cpp.default.defines":{"type":["array","null"],"items":{"type":"string"},"default":null,"description":"The value to use in a configuration if \"defines\" is not specified, or the values to insert if \"${default}\" is present in \"defines\".","scope":"resource"},"C_Cpp.default.macFrameworkPath":{"type":["array","null"],"items":{"type":"string"},"default":null,"description":"The value to use in a configuration if \"macFrameworkPath\" is not specified, or the values to insert if \"${default}\" is present in \"macFrameworkPath\".","scope":"resource"},"C_Cpp.default.windowsSdkVersion":{"type":["string","null"],"default":null,"description":"Version of the Windows SDK include path to use on Windows, e.g. '10.0.17134.0'.","pattern":"^\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1$","scope":"resource"},"C_Cpp.default.compileCommands":{"type":["string","null"],"default":null,"description":"The value to use in a configuration if \"compileCommands\" is either not specified, or set to \"${default}\".","scope":"resource"},"C_Cpp.default.forcedInclude":{"type":["array","null"],"items":{"type":"string"},"default":null,"description":"The value to use in a configuration if \"forcedInclude\" is not specified, or the values to insert if \"${default}\" is present in \"forcedInclude\".","scope":"resource"},"C_Cpp.default.intelliSenseMode":{"type":["string","null"],"enum":["msvc-x64","gcc-x64","clang-x64"],"default":null,"description":"The value to use in a configuration if \"intelliSenseMode\" is either not specified or set to \"${default}\".","scope":"resource"},"C_Cpp.default.compilerPath":{"type":["string","null"],"default":null,"description":"The value to use in a configuration if \"compilerPath\" is either not specified or set to \"${default}\".","scope":"resource"},"C_Cpp.default.cStandard":{"type":["string","null"],"enum":["c89","c99","c11"],"default":null,"description":"The value to use in a configuration if \"cStandard\" is either not specified or set to \"${default}\".","scope":"resource"},"C_Cpp.default.cppStandard":{"type":["string","null"],"enum":["c++98","c++03","c++11","c++14","c++17"],"default":null,"description":"The value to use in a configuration if \"cppStandard\" is either not specified or set to \"${default}\".","scope":"resource"},"C_Cpp.default.configurationProvider":{"type":["string","null"],"default":null,"description":"The value to use in a configuration if \"configurationProvider\" is either not specified or set to \"${default}\".","scope":"resource"},"C_Cpp.default.browse.path":{"type":["array","null"],"items":{"type":"string"},"default":null,"description":"The value to use in a configuration if \"browse.path\" is not specified, or the values to insert if \"${default}\" is present in \"browse.path\".","scope":"resource"},"C_Cpp.default.browse.databaseFilename":{"type":["string","null"],"default":null,"description":"The value to use in a configuration if \"browse.databaseFilename\" is either not specified or set to \"${default}\".","scope":"resource"},"C_Cpp.default.browse.limitSymbolsToIncludedHeaders":{"type":"boolean","default":true,"description":"The value to use in a configuration if \"browse.limitSymbolsToIncludedHeaders\" is either not specified or set to \"${default}\".","scope":"resource"},"C_Cpp.default.systemIncludePath":{"type":["array","null"],"items":{"type":"string"},"default":null,"description":"The value to use for the system include path. If set, it overrides the system include path acquired via \"compilerPath\" and \"compileCommands\" settings.","scope":"resource"},"C_Cpp.default.enableConfigurationSquiggles":{"type":["boolean","null"],"default":null,"description":"Controls whether the extension will report errors detected in c_cpp_properties.json.","scope":"resource"},"C_Cpp.updateChannel":{"type":"string","enum":["Default","Insiders"],"default":"Default","description":"Set to \"Insiders\" to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.","scope":"resource"},"C_Cpp.suggestSnippets":{"type":"boolean","default":true,"description":"If true, snippets are provided by the language server.","scope":"resource"}}},"commands":[{"command":"C_Cpp.ConfigurationSelect","title":"Select a configuration...","category":"C/C++"},{"command":"C_Cpp.ConfigurationProviderSelect","title":"Change configuration provider...","category":"C/C++"},{"command":"C_Cpp.ConfigurationEditJSON","title":"Edit configurations (JSON)","category":"C/C++"},{"command":"C_Cpp.ConfigurationEditUI","title":"Edit configurations (UI)","category":"C/C++"},{"command":"C_Cpp.GoToDeclaration","title":"Go to Declaration","category":"C/C++"},{"command":"C_Cpp.PeekDeclaration","title":"Peek Declaration","category":"C/C++"},{"command":"C_Cpp.SwitchHeaderSource","title":"Switch Header/Source","category":"C/C++"},{"command":"C_Cpp.Navigate","title":"Navigate...","category":"C/C++"},{"command":"C_Cpp.EnableErrorSquiggles","title":"Enable error squiggles","category":"C/C++"},{"command":"C_Cpp.DisableErrorSquiggles","title":"Disable error squiggles","category":"C/C++"},{"command":"C_Cpp.ToggleIncludeFallback","title":"Toggle IntelliSense engine fallback on include errors","category":"C/C++"},{"command":"C_Cpp.ToggleDimInactiveRegions","title":"Toggle inactive region colorization","category":"C/C++"},{"command":"C_Cpp.ShowReleaseNotes","title":"Show release notes","category":"C/C++"},{"command":"C_Cpp.ResetDatabase","title":"Reset IntelliSense database","category":"C/C++"},{"command":"C_Cpp.PauseParsing","title":"Pause parsing","category":"C/C++"},{"command":"C_Cpp.ResumeParsing","title":"Resume parsing","category":"C/C++"},{"command":"C_Cpp.ShowParsingCommands","title":"Show parsing commands","category":"C/C++"},{"command":"C_Cpp.TakeSurvey","title":"Take survey","category":"C/C++"},{"command":"C_Cpp.BuildAndDebugActiveFile","title":"Build and Debug Active File","category":"C/C++"},{"command":"C_Cpp.LogDiagnostics","title":"Log Diagnostics","category":"C/C++"}],"keybindings":[{"command":"C_Cpp.GoToDeclaration","key":"Ctrl+F12","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.GoToDeclaration","key":"Ctrl+F12","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.PeekDeclaration","key":"Ctrl+Alt+F12","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.PeekDeclaration","key":"Ctrl+Alt+F12","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.SwitchHeaderSource","key":"Alt+O","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.SwitchHeaderSource","key":"Alt+O","when":"editorTextFocus && editorLangId == 'c'"},{"command":"C_Cpp.Navigate","key":"Alt+N","when":"editorTextFocus && editorLangId == 'cpp'"},{"command":"C_Cpp.Navigate","key":"Alt+N","when":"editorTextFocus && editorLangId == 'c'"}],"debuggers":[{"type":"cppdbg","label":"C++ (GDB/LLDB)","enableBreakpointsFor":{"languageIds":["c","cpp"]},"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","variables":{"pickProcess":"extension.pickNativeProcess","pickRemoteProcess":"extension.pickRemoteNativeProcess"},"configurationAttributes":{"launch":{"type":"object","default":{},"required":["program"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"type":"string","description":"The type of the engine. Must be \"cppdbg\".","default":"cppdbg"},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"cwd":{"type":"string","description":"The working directory of the target","default":"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","default":{},"properties":{"name":{"type":"string"},"value":{"type":"string"}}},"default":[]},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerArgs":{"type":"string","description":"Arguments for the mi debugger (such as gdb) to use. When unspecified.","default":""},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"debugServerPath":{"type":"string","description":"Optional full path to debug server to launch. Defaults to null.","default":""},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":""},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":""},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000"},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, on Linux and Windows, it will appear in the Integrated Console.","default":false},"avoidWindowsConsoleRedirection":{"type":"boolean","description":"If true, disables debuggee console redirection that is required for Integrated Terminal support.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"description":"Optional flags to determine what types of messages should be logged to the Debug Console.","type":"object","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"/usr/bin","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}}}},"attach":{"type":"object","default":{},"required":["program","processId"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/a.out"},"type":{"type":"string","description":"The type of the engine. Must be \"cppdbg\".","default":"cppdbg"},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"description":"Optional flags to determine what types of messages should be logged to the Debug Console.","type":"object","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.","default":false},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"/usr/bin","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]}}}}},{"type":"cppvsdbg","label":"C++ (Windows)","enableBreakpointsFor":{"languageIds":["c","cpp"]},"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","variables":{"pickProcess":"extension.pickNativeProcess"},"configurationAttributes":{"launch":{"type":"object","default":{},"required":["program","cwd"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceRoot}/program.exe"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"type":"string","description":"The type of the engine. Must be \"cppvsdbg\".","default":"cppvsdbg"},"cwd":{"type":"string","description":"The working directory of the target.","default":"${workspaceRoot}"},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].","items":{"type":"object","default":{},"properties":{"name":{"type":"string"},"value":{"type":"string"}}},"default":[]},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions. These file has key value pairs sepearted by an equals sign per line. E.g. KEY=VALUE","default":"${workspaceFolder}/.env"},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"dumpPath":{"type":"string","description":"Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.","default":""},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, no console is launched.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"enableDebugHeap":{"type":"boolean","description":"If false, the process will be launched with debug heap disabled. This sets the environment variable '_NO_DEBUG_HEAP' to '1'.","default":false},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}}}}},"attach":{"type":"object","default":{},"required":["processId"],"properties":{"type":{"type":"string","description":"The type of the engine. Must be \"cppvsdbg\".","default":"cppvsdbg"},"symbolSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process.","default":""},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'","default":{"<source-path>":"<target-path>"}},"logging":{"type":"object","description":"Optional flags to determine what types of messages should be logged to the Debug Console.","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false}}}}}}}],"jsonValidation":[{"fileMatch":"c_cpp_properties.json","url":"./c_cpp_properties.schema.json"}],"menus":{"editor/context":[{"when":"editorLangId == c","command":"C_Cpp.GoToDeclaration","group":"navigation@2"},{"when":"editorLangId == cpp","command":"C_Cpp.GoToDeclaration","group":"navigation@2"},{"when":"editorLangId == c","command":"C_Cpp.PeekDeclaration","group":"navigation@3"},{"when":"editorLangId == cpp","command":"C_Cpp.PeekDeclaration","group":"navigation@3"},{"when":"editorLangId == c","command":"C_Cpp.SwitchHeaderSource","group":"other1_navigation@1"},{"when":"editorLangId == cpp","command":"C_Cpp.SwitchHeaderSource","group":"other1_navigation@1"},{"when":"editorLangId == c","command":"C_Cpp.Navigate","group":"other1_navigation@2"},{"when":"editorLangId == cpp","command":"C_Cpp.Navigate","group":"other1_navigation@2"},{"when":"editorLangId == c","command":"workbench.action.gotoSymbol","group":"other1_navigation@3"},{"when":"editorLangId == cpp","command":"workbench.action.gotoSymbol","group":"other1_navigation@3"},{"when":"editorLangId == c","command":"workbench.action.showAllSymbols","group":"other1_navigation@4"},{"when":"editorLangId == cpp","command":"workbench.action.showAllSymbols","group":"other1_navigation@4"},{"when":"editorLangId == cpp","command":"C_Cpp.BuildAndDebugActiveFile","group":"other2_debug@1"},{"when":"editorLangId == c","command":"C_Cpp.BuildAndDebugActiveFile","group":"other2_debug@1"}]},"configurationDefaults":{"[cpp]":{"editor.wordBasedSuggestions":false},"[c]":{"editor.wordBasedSuggestions":false}}},"scripts":{"compile":"npm run vscode:prepublish","compileDev":"webpack --mode development","generateOptionsSchema":"gulp generateOptionsSchema","postinstall":"node ./node_modules/vscode/bin/install","pretest":"tsc -p test.tsconfig.json","pr-check":"gulp pr-check","tslint":"gulp tslint","unitTests":"gulp unitTests","vscode:prepublish":"node ./tools/prepublish.js && webpack --mode production","watch":"webpack --watch --mode development"},"devDependencies":{"@types/mocha":"^5.2.6","@types/node":"^8.10.45","async-child-process":"^1.1.1","await-notify":"^1.0.1","child-process":"^1.0.2","extend":"3.0.2","gulp":"^4.0.0","gulp-env":"0.4.0","gulp-mocha":"5.0.0","gulp-tslint":"8.1.2","mocha":"^5.2.0","tslint":"5.8.0","tslint-microsoft-contrib":"5.0.1","tslint-no-unused-expression-chai":"0.0.3","ts-loader":"^5.3.3","typescript":"^2.9.2","vrsource-tslint-rules":"^5.8.3","vscode":"^1.1.33","webpack":"^4.30.0","webpack-cli":"^3.3.1"},"dependencies":{"@types/minimatch":"^3.0.3","escape-string-regexp":"1.0.5","http-proxy-agent":"~2.1.0","https-proxy-agent":"~2.2.0","jsonc-parser":"^1.0.0","minimatch":"~3.0.4","mkdirp":"~0.5.1","tmp":"~0.0.33","vscode-cpptools":"^2.1.2","vscode-debugadapter":"~1.33.0","vscode-debugprotocol":"~1.33.0","vscode-extension-telemetry":"^0.1.1","vscode-languageclient":"5.1.1","yauzl":"~2.10.0"},"runtimeDependencies":[{"description":"C/C++ language components (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?linkid=2085632","platforms":["linux"],"architectures":["x86_64"],"binaries":["./bin/Microsoft.VSCode.CPP.Extension.linux","./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"]},{"description":"C/C++ language components (Linux / x86)","url":"https://go.microsoft.com/fwlink/?linkid=2085734","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["./bin/Microsoft.VSCode.CPP.Extension.linux","./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"]},{"description":"C/C++ language components (OS X)","url":"https://go.microsoft.com/fwlink/?linkid=2085735","platforms":["darwin"],"binaries":["./bin/Microsoft.VSCode.CPP.Extension.darwin","./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.darwin"]},{"description":"C/C++ language components (Windows)","url":"https://go.microsoft.com/fwlink/?linkid=2085633","platforms":["win32"],"binaries":[]},{"description":"ClangFormat (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?LinkID=872607","platforms":["linux"],"architectures":["x86_64"],"binaries":["./LLVM/bin/clang-format"]},{"description":"ClangFormat (Linux / x86)","url":"https://go.microsoft.com/fwlink/?LinkID=872608","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["./LLVM/bin/clang-format"]},{"description":"ClangFormat (OS X)","url":"https://go.microsoft.com/fwlink/?LinkID=872609","platforms":["darwin"],"binaries":["./LLVM/bin/clang-format.darwin"]},{"description":"ClangFormat (Windows)","url":"https://go.microsoft.com/fwlink/?LinkID=872610","platforms":["win32"],"binaries":[]},{"description":"Mono Framework Assemblies","url":"https://go.microsoft.com/fwlink/?LinkId=2027135","platforms":["linux","darwin"],"binaries":[]},{"description":"Mono Runtime (Linux / x86)","url":"https://go.microsoft.com/fwlink/?LinkId=2027410","platforms":["linux"],"architectures":["x86","i686","i386"],"binaries":["./debugAdapters/mono.linux-x86"]},{"description":"Mono Runtime (Linux / x86_64)","url":"https://go.microsoft.com/fwlink/?LinkId=2027416","platforms":["linux"],"architectures":["x86_64"],"binaries":["./debugAdapters/mono.linux-x86_64"]},{"description":"Mono Runtime (OS X)","url":"https://go.microsoft.com/fwlink/?LinkId=2027403","platforms":["darwin"],"binaries":["./debugAdapters/mono.osx"]},{"description":"LLDB 3.8.0 (OS X)","url":"https://go.microsoft.com/fwlink/?LinkID=817244","platforms":["darwin"],"binaries":["./debugAdapters/lldb/bin/debugserver","./debugAdapters/lldb/bin/lldb-mi","./debugAdapters/lldb/bin/lldb-argdumper","./debugAdapters/lldb/bin/lldb-launcher"]},{"description":"Visual Studio Windows Debugger","url":"https://go.microsoft.com/fwlink/?linkid=2082216","platforms":["win32"],"binaries":[]}],"uuid":"690b692e-e8a9-493f-b802-8089d50ac1b2","isBuiltin":false,"isUnderDevelopment":false,"id":"ms-vscode.cpptools","identifier":{"value":"ms-vscode.cpptools","_lower":"ms-vscode.cpptools"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/ms-vscode.cpptools-0.23.0","path":"/root/.vscode/extensions/ms-vscode.cpptools-0.23.0","scheme":"file"}},{"name":"cmake","version":"0.0.17","publisher":"twxs","displayName":"CMake","description":"CMake langage support for Visual Studio Code","author":{"name":"Nicolas Martin"},"repository":{"type":"git","url":"https://github.com/twxs/vs.language.cmake.git"},"bugs":{"url":"https://github.com/twxs/vs.language.cmake/issues"},"homepage":"https://github.com/twxs/vs.language.cmake/blob/master/README.md","keywords":["CMake","Syntax"],"categories":["Languages","Snippets","Other"],"icon":"images/icon.png","galleryBanner":{"color":"#5c2d91","theme":"dark"},"license":"MIT","activationEvents":["onLanguage:cmake"],"engines":{"vscode":"^1.10.0"},"main":"/root/.vscode/extensions/twxs.cmake-0.0.17/out/extension","contributes":{"languages":[{"id":"cmake","extensions":[".cmake"],"filenames":["CMakelists.txt"],"aliases":["CMake"]},{"id":"cmake-cache","filenames":["CMakeCache.txt"],"aliases":["CMake Cache"]}],"commands":[{"command":"cmake.onlineHelp","title":"CMake: Online Help"}],"grammars":[{"language":"cmake","scopeName":"source.cmake","path":"./syntaxes/CMake.tmLanguage"},{"language":"cmake-cache","scopeName":"source.cmakecache","path":"./syntaxes/CMakeCache.tmLanguage"}],"configuration":{"title":"CMake configuration","properties":{"cmake.cmakePath":{"type":"string","default":"cmake","description":"The path to CMake generator executable"}}}},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"dependencies":{"opener":"^1.4.2"},"devDependencies":{"typescript":"^2.0.9","vscode":"^1.0.3","@types/node":"^6.0.47","mocha":"^3.1.2","@types/mocha":"^2.2.33"},"uuid":"2be7cf14-2603-402e-9771-fd79df83cdf8","isBuiltin":false,"isUnderDevelopment":false,"id":"twxs.cmake","identifier":{"value":"twxs.cmake","_lower":"twxs.cmake"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/twxs.cmake-0.0.17","path":"/root/.vscode/extensions/twxs.cmake-0.0.17","scheme":"file"}},{"name":"cmake-tools","displayName":"CMake Tools","description":"Extended CMake support in Visual Studio Code","version":"1.1.3","repository":{"type":"git","url":"https://github.com/vector-of-bool/vscode-cmake-tools"},"bugs":{"url":"https://github.com/vector-of-bool/vscode-cmake-tools/issues"},"homepage":"https://github.com/vector-of-bool/vscode-cmake-tools","keywords":["cmake","tools","build","c++","native"],"publisher":"vector-of-bool","engines":{"vscode":"^1.29.1"},"categories":["Other"],"galleryBanner":{"color":"#13578c","theme":"dark"},"icon":"res/icon_128.png","activationEvents":["onCommand:cmake.build","onCommand:cmake.buildWithTarget","onCommand:cmake.clean","onCommand:cmake.cleanConfigure","onCommand:cmake.cleanRebuild","onCommand:cmake.configure","onCommand:cmake.ctest","onCommand:cmake.debugTarget","onCommand:cmake.editCache","onCommand:cmake.editKits","onCommand:cmake.viewLog","onCommand:cmake.install","onCommand:cmake.launchTarget","onCommand:cmake.launchTargetPath","onCommand:cmake.quickStart","onCommand:cmake.resetState","onCommand:cmake.scanForKits","onCommand:cmake.selectLaunchTarget","onCommand:cmake.setVariant","onCommand:cmake.stop","onCommand:cmake.outline.configure","onCommand:cmake.outline.build","workspaceContains:CMakeLists.txt","workspaceContains:.vscode/cmake-kits.json"],"main":"/root/.vscode/extensions/vector-of-bool.cmake-tools-1.1.3/out/src/extension","contributes":{"commands":[{"command":"cmake.viewLog","title":"Open the CMake Tools log file","category":"CMake"},{"command":"cmake.editKits","title":"Edit user-local CMake kits","category":"CMake"},{"command":"cmake.scanForKits","title":"Scan for Kits","category":"CMake"},{"command":"cmake.selectKit","title":"Select a Kit","category":"CMake"},{"command":"cmake.setVariant","title":"Set the current build variant","category":"CMake"},{"command":"cmake.configure","title":"Configure","category":"CMake"},{"command":"cmake.outline.configure","title":"Configure","icon":{"dark":"res/configure-icon.svg","light":"res/configure-icon.svg"}},{"command":"cmake.build","title":"Build","category":"CMake"},{"command":"cmake.buildNamedTarget","title":"(Internal) Build a target by name"},{"command":"cmake.outline.build","title":"Build","icon":{"dark":"res/build-icon.svg","light":"res/build-icon.svg"}},{"command":"cmake.compileFile","title":"Compile File","category":"CMake","icon":{"dark":"res/build-icon.svg","light":"res/build-icon.svg"}},{"command":"cmake.outline.compileFile","title":"Compile This File","icon":{"dark":"res/build-icon.svg","light":"res/build-icon.svg"}},{"command":"cmake.install","title":"Install","category":"CMake"},{"command":"cmake.buildWithTarget","title":"Build a target","category":"CMake"},{"command":"cmake.setDefaultTarget","title":"Set the default build target","category":"CMake"},{"command":"cmake.cleanConfigure","title":"Delete cached build settings and reconfigure","category":"CMake"},{"command":"cmake.outline.cleanConfigure","title":"Clean reconfigure"},{"command":"cmake.clean","title":"Clean","category":"CMake"},{"command":"cmake.outline.clean","title":"Clean"},{"command":"cmake.cleanRebuild","title":"Clean rebuild","category":"CMake"},{"command":"cmake.outline.cleanRebuild","title":"Clean rebuild"},{"command":"cmake.ctest","title":"Run tests","category":"CMake"},{"command":"cmake.editCache","title":"Edit the CMake Cache","category":"CMake"},{"command":"cmake.quickStart","title":"Quick Start","category":"CMake"},{"command":"cmake.debugTarget","title":"Debug Target","category":"CMake"},{"command":"cmake.launchTarget","title":"Execute the current target without a debugger","category":"CMake"},{"command":"cmake.selectLaunchTarget","title":"Select a Target to Debug","category":"CMake"},{"command":"cmake.stop","title":"Stop the currently running CMake/Build process","category":"CMake"},{"command":"cmake.outline.stop","title":"Stop current build","icon":{"dark":"res/stop-icon.svg","light":"res/stop-icon.svg"}},{"command":"cmake.resetState","title":"Reset CMake Tools extension state (For troubleshooting)","category":"CMake"},{"command":"cmake.outline.buildTarget","title":"Build","icon":{"dark":"res/build-icon.svg","light":"res/build-icon.svg"}},{"command":"cmake.outline.runUtilityTarget","title":"Run utility"},{"command":"cmake.outline.debugTarget","title":"Run with debugger"},{"command":"cmake.outline.launchTarget","title":"Run in terminal"},{"command":"cmake.outline.setDefaultTarget","title":"Set as default target"},{"command":"cmake.outline.setLaunchTarget","title":"Set as launch/debug target"},{"command":"cmake.outline.revealInCMakeLists","title":"Open CMakeLists.txt"}],"menus":{"commandPalette":[{"command":"cmake.configure"},{"command":"cmake.build"},{"command":"cmake.install"},{"command":"cmake.buildWithTarget"},{"command":"cmake.compileFile"},{"command":"cmake.setVariant"},{"command":"cmake.setDefaultTarget"},{"command":"cmake.setDefaultTarget"},{"command":"cmake.cleanConfigure"},{"command":"cmake.clean"},{"command":"cmake.cleanRebuild"},{"command":"cmake.ctest"},{"command":"cmake.editCache"},{"command":"cmake.debugTarget"},{"command":"cmake.launchTarget"},{"command":"cmake.selectLaunchTarget"},{"command":"cmake.stop"}],"view/title":[{"command":"cmake.outline.configure","when":"view == cmake.outline && !cmake:isBuilding","group":"navigation@1"},{"command":"cmake.outline.build","when":"view == cmake.outline && !cmake:isBuilding","group":"navigation@2"},{"command":"cmake.outline.stop","when":"view == cmake.outline && cmake:isBuilding","group":"navigation@3"},{"command":"cmake.outline.clean","when":"view == cmake.outline","group":"1_cmakeOutline"},{"command":"cmake.outline.cleanConfigure","when":"view == cmake.outline","group":"1_cmakeOutline"},{"command":"cmake.outline.cleanRebuild","when":"view == cmake.outline","group":"1_cmakeOutline"}],"view/item/context":[{"command":"cmake.outline.buildTarget","when":"view == cmake.outline && viewItem =~ /canBuild=true/","group":"inline"},{"command":"cmake.outline.buildTarget","when":"view == cmake.outline && viewItem =~ /canBuild=true/","group":"1_targetActions@1"},{"command":"cmake.outline.runUtilityTarget","when":"view == cmake.outline && viewItem =~ /canRun=true/","group":"1_targetActions@2"},{"command":"cmake.outline.debugTarget","when":"view == cmake.outline && viewItem =~ /type=EXECUTABLE/","group":"1_targetActions@3"},{"command":"cmake.outline.launchTarget","when":"view == cmake.outline && viewItem =~ /type=EXECUTABLE/","group":"1_targetActions@4"},{"command":"cmake.outline.revealInCMakeLists","when":"view == cmake.outline && viewItem =~ /nodeType=target/","group":"1_targetActions@5"},{"command":"cmake.outline.setDefaultTarget","when":"view == cmake.outline && viewItem =~ /canRun=true|canBuild=true/ && viewItem =~ /isDefault=false/","group":"2_targetState@1"},{"command":"cmake.outline.setLaunchTarget","when":"view == cmake.outline && viewItem =~ /type=EXECUTABLE/ && viewItem =~ /isLaunch=false/","group":"2_targetState@2"},{"command":"cmake.outline.compileFile","when":"view == cmake.outline && viewItem =~ /nodeType=file/","group":"inline"}],"editor/title/context":[{"command":"cmake.compileFile","when":"resourceLangId == cpp"},{"command":"cmake.compileFile","when":"resourceLangId == c"}],"editor/title":[{"command":"cmake.compileFile","when":"resourceLangId == cpp","group":"navigation"},{"command":"cmake.compileFile","when":"resourceLangId == c","group":"navigation"}],"explorer/context":[{"command":"cmake.compileFile","when":"resourceLangId == cpp"},{"command":"cmake.compileFile","when":"resourceLangId == c"}]},"configuration":{"type":"object","title":"CMake Tools configuration","properties":{"cmake.cmakePath":{"type":"string","default":"cmake","description":"Name/path of the CMake executable to use","scope":"resource"},"cmake.buildDirectory":{"type":"string","default":"${workspaceRoot}/build","description":"The directory where CMake build files will go","scope":"resource"},"cmake.installPrefix":{"type":"string","default":null,"description":"The directory where CMake installed files will go.","scope":"resource"},"cmake.sourceDirectory":{"type":"string","default":"${workspaceRoot}","description":"The directory of the root CMakeLists.txt file","scope":"resource"},"cmake.saveBeforeBuild":{"type":"boolean","default":true,"description":"Save open files before building","scope":"resource"},"cmake.buildBeforeRun":{"type":"boolean","default":true,"description":"Build the target before running it.","scope":"resource"},"cmake.clearOutputBeforeBuild":{"type":"boolean","default":true,"description":"Clear build output before each build","scope":"resource"},"cmake.configureSettings":{"type":"object","default":{},"description":"CMake variables to set on the command line","scope":"resource"},"cmake.cacheInit":{"oneOf":[{"type":"string","description":"Path to an cache-initializing CMake file"},{"type":"array","description":"List of cache initializer files","items":{"type":"string","description":"A cache initializing CMake file"}}],"scope":"resource"},"cmake.preferredGenerators":{"type":"array","default":["Ninja","Unix Makefiles"],"description":"The preferred CMake generator(s) to use when configuring (tried in order of listing)","scope":"resource"},"cmake.generator":{"type":"string","default":null,"description":"The CMake generator to use","scope":"resource"},"cmake.toolset":{"type":"string","default":null,"description":"The CMake toolset to use when configuring","scope":"resource"},"cmake.platform":{"type":"string","default":null,"description":"The CMake platform to use when configuring","scope":"resource"},"cmake.configureArgs":{"type":"array","description":"Additional arguments to pass to CMake when configuring","items":{"type":"string","title":"CMake Arguments"},"default":[],"scope":"resource"},"cmake.buildArgs":{"type":"array","description":"Additional arguments to pass to CMake when building","items":{"type":"string"},"default":[],"scope":"resource"},"cmake.buildToolArgs":{"type":"array","description":"Additional arguments to pass to the underlying build tool when building","items":{"type":"string"},"default":[],"scope":"resource"},"cmake.parallelJobs":{"type":"number","default":0,"description":"The number of parallel build jobs. Use zero to automatically detect the number of CPUs.","scope":"resource"},"cmake.ctestPath":{"type":"string","default":null,"description":"Path to CTest executable. If null, will be inference from cmake.cmakePath (recommended to leave null)","scope":"resource"},"cmake.ctest.parallelJobs":{"type":"number","default":0,"description":"The number of parallel test jobs. Use zero to use the value of cmake.parallelJobs","scope":"resource"},"cmake.autoRestartBuild":{"type":"boolean","default":false,"description":"If 'true', requesting a build while a build is already running will stop and restart the build","scope":"resource"},"cmake.parseBuildDiagnostics":{"type":"boolean","default":true,"description":"Parse compiler output for warnings and errors","scope":"resource"},"cmake.enabledOutputParsers":{"type":"array","description":"Output parsers to use. Supported parsers 'cmake', 'gcc', 'gnuld' for GNULD-style inker output, 'msvc' for Microsoft Visual C++, and 'ghs' for the Green Hills compiler with --no_wrap_diagnostics --brief_diagnostics","items":{"type":"string","enum":["cmake","gcc","gnuld","msvc","ghs"]},"default":["cmake","gcc","gnuld","msvc","ghs"],"scope":"resource"},"cmake.debugConfig":{"type":"object","description":"The debug configuration to use when debugging a target","properties":{"symbolSearchPath":{"type":"string","description":"Visual Studio debugger symbol search paths"},"additionalSOLibSearchPath":{"type":"string","description":"Paths for GDB or LLDB to search for .so files"},"externalConsole":{"type":"boolean","description":"Launch an external console for the program"},"logging":{"type":"object","description":"Tell what types of messages should be logged to the console","properties":{"exceptions":{"type":"boolean","default":true},"moduleLoad":{"type":"boolean","default":true},"programOutput":{"type":"boolean","default":true},"engineLogging":{"type":"boolean","default":false},"trace":{"type":"boolean","default":false},"traceResponse":{"type":"boolean","default":false}}},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging"},"args":{"type":"array","description":"Arguments to pass to program command line","items":{"type":"string"},"default":[]},"cwd":{"type":"string","description":"Set the working directory for the program"},"environment":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Name of environment variable"},"value":{"type":"string","description":"Value for the environment variable"}}}},"MIMode":{"type":"string","enum":["gdb","lldb"]},"miDebuggerPath":{"type":"string","description":"Path to gdb or lldb debugger"},"stopAtEntry":{"type":"boolean","description":"Stop at the entry point of the target","default":false},"setupCommands":{"type":"array","description":"Command to set up gdb or lldb","items":{"type":"object","properties":{"text":{"type":"string","description":"Command to run"},"description":{"type":"string","description":"Description of the command"},"ignoreFailures":{"type":"boolean","default":false}}}},"customLaunchSetupCommands":{"type":"array","description":"Command to set up gdb or lldb","items":{"type":"object","properties":{"text":{"type":"string","description":"Command to run"},"description":{"type":"string","description":"Description of the command"},"ignoreFailures":{"type":"boolean","default":false}}}},"launchCompleteCommand":{"type":"string"},"dumpPath":{"type":"string"},"coreDumpPath":{"type":"string"}},"scope":"resource"},"cmake.defaultVariants":{"type":"object","$schema":"schemas/variants-schema.json","default":{"buildType":{"default":"debug","description":"The build type","choices":{"debug":{"short":"Debug","long":"Emit debug information without performing optimizations","buildType":"Debug"},"release":{"short":"Release","long":"Enable optimizations, omit debug info","buildType":"Release"},"minsize":{"short":"MinSizeRel","long":"Optimize for smallest binary size","buildType":"MinSizeRel"},"reldeb":{"short":"RelWithDebInfo","long":"Perform optimizations AND include debugging information","buildType":"RelWithDebInfo"}}}},"scope":"resource"},"cmake.ctestArgs":{"type":"array","items":{"type":"string"},"description":"Arguments to pass to CTest","default":[],"scope":"resource"},"cmake.environment":{"type":"object","default":{},"description":"Environment variables to set when running CMake commands","additionalProperties":{"type":"string","description":"Value for the environment variable"},"scope":"resource"},"cmake.configureEnvironment":{"type":"object","default":{},"description":"Environment variables to pass to CMake during configure","additionalProperties":{"type":"string","description":"Value for the environment variable"},"scope":"resource"},"cmake.buildEnvironment":{"type":"object","default":{},"description":"Environment variables to pass to CMake during build","additionalProperties":{"type":"string","description":"Value for the environment variable"},"scope":"resource"},"cmake.testEnvironment":{"type":"object","default":{},"description":"Environment variables to pass to CTest","additionalProperties":{"type":"string","description":"Value for the environment variable"},"scope":"resource"},"cmake.mingwSearchDirs":{"type":"array","items":{"type":"string","description":"Path to a directory"},"default":["C:\\MinGW"],"description":"Directories where MinGW may be installed","scope":"window"},"cmake.emscriptenSearchDirs":{"type":"array","items":{"type":"string","description":"Path to a directory"},"default":[],"description":"Directories where Emscripten may be installed","scope":"window"},"cmake.copyCompileCommands":{"type":"string","default":null,"description":"Copy compile_commands.json to this location after a successful configure","scope":"resource"},"cmake.configureOnOpen":{"type":"boolean","default":null,"description":"Automatically configure CMake project directories when they are opened","scope":"resource"},"cmake.useCMakeServer":{"type":"boolean","default":true,"description":"Enable CMake server","scope":"resource"},"cmake.outputLogEncoding":{"type":"string","default":"auto","description":"Encoding of the output from external commonds(eg.cmake -- build)","scope":"window"},"cmake.enableTraceLogging":{"type":"boolean","default":false,"description":"Enable trace logging to file and console (very noisy)","scope":"window"},"cmake.loggingLevel":{"type":"string","default":"info","enum":["trace","debug","info","note","warning","error","fatal"],"scope":"window"},"cmake.revealLog":{"type":"string","default":"always","enum":["focus","always","never"]}}},"keybindings":[{"key":"f7","command":"cmake.build"},{"key":"shift+f7","command":"cmake.buildWithTarget"},{"key":"ctrl+f5","command":"cmake.debugTarget","when":"!inDebugMode"},{"key":"shift+f5","command":"cmake.launchTarget"}],"viewsContainers":{"activitybar":[{"id":"cmake__viewContainer","title":"CMake","icon":"res/cmake-view-icon.svg","when":"cmakeToolsActive"}]},"views":{"cmake__viewContainer":[{"id":"cmake.folders","name":"Folders","when":"cmakeToolsMultiRootActive"},{"id":"cmake.outline","name":"Project Outline","when":"cmakeToolsActive"}]},"yamlValidation":[{"fileMatch":"cmake-variants.yaml","url":"./schemas/variants-schema.json"}],"jsonValidation":[{"fileMatch":"cmake-variants.json","url":"./schemas/variants-schema.json"},{"fileMatch":"cmake-variants.yaml","url":"./schemas/variants-schema.json"},{"fileMatch":"cmake-kits.json","url":"./schemas/kits-schema.json"}]},"_moduleAliases":{"@cmt":"out/src/","@test":"out/test/"},"scripts":{"vscode:prepublish":"./node_modules/.bin/tsc -p ./","compile":"./node_modules/.bin/tsc -watch -p ./","compile-once":"./node_modules/.bin/tsc -p ./","postinstall":"node ./node_modules/vscode/bin/install","lint":"node ./node_modules/tslint/bin/tslint -p . --fix","lint:nofix":"node ./node_modules/tslint/bin/tslint -p .","docs":"node ./node_modules/typedoc/bin/typedoc --mode modules --excludeExternals --out build/docs/dev --readme none src/"},"devDependencies":{"@types/ajv":"^0.0.3","@types/chai":"^4.0.4","@types/chai-as-promised":"^7.1.0","@types/es6-promisify":"~5.0.0","@types/js-yaml":"^3.5.28","@types/json5":"~0.0.29","@types/mocha":"~2.2.41","@types/node":"~8.9.3","@types/rimraf":"^0.0.28","@types/sinon":"~4.3.3","@types/tmp":"^0.0.33","@types/which":"~1.3.1","@types/xml2js":"^0.0.28","chai":"^4.1.2","chai-as-promised":"^7.1.1","clang-format":"^1.2.2","mocha":"~3.4.2","sinon":"~5.0.7","ts-node":"^6.0.0","tslint":"^5.9.1","typedoc":"~0.11.1","typescript":"~2.8.3","vscode":"1.1.21"},"dependencies":{"ajv":"^4.7.5","es6-promisify":"~5.0.0","iconv-lite":"^0.4.21","js-yaml":"^3.6.1","json5":"^0.5.1","module-alias":"^2.0.6","open":"0.0.5","rimraf":"^2.5.4","rollbar":"~2.2.8","tmp":"^0.0.33","vscode-cpptools":"^2.1.2","which":"~1.3.0","xml2js":"^0.4.17"},"uuid":"7c889349-8749-43d4-8b5e-08939936d7f4","isBuiltin":false,"isUnderDevelopment":false,"id":"vector-of-bool.cmake-tools","identifier":{"value":"vector-of-bool.cmake-tools","_lower":"vector-of-bool.cmake-tools"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/vector-of-bool.cmake-tools-1.1.3","path":"/root/.vscode/extensions/vector-of-bool.cmake-tools-1.1.3","scheme":"file"}}]}